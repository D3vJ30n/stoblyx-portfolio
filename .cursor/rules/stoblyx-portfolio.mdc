---
description: stoblyx-portfolio-rules
globs: **/*
---

## **1️⃣ Cursor AI에게 프로젝트 구조 설명하기**
### **📌 한 문장 요약**
> 내 프로젝트는 **헥사고널 아키텍처 기반의 모놀리식 시스템**으로, 도메인 로직을 분리하여 확장성을 고려한 구조로 설계되었습니다.

---

## **2️⃣ 단계별로 구조 설명하기**
### **✅ 1. 아키텍처 개요**
```plaintext
이 프로젝트는 "헥사고널 아키텍처 + 모놀리식 구조"를 기반으로 설계됨.
핵심 원칙:
1. 도메인 로직과 인프라(데이터베이스, API 등)의 분리
2. 유스케이스 기반의 서비스 계층 (Application Layer)
3. 포트와 어댑터 패턴을 사용하여 외부 의존성 최소화
4. 단일 서비스로 배포되지만, 향후 마이크로서비스 전환 가능하도록 설계됨
```

---

### **✅ 2. 프로젝트 폴더 구조 설명**
```plaintext

```

---

### **✅ 3. 각 계층의 역할**
| 계층 | 설명 |
|------|------------------------------------------|
| `domain/` | **비즈니스 로직 계층** (핵심 도메인 모델, 서비스) |
| `application/` | **유스케이스 계층** (API를 통해 실행되는 서비스) |
| `adapter/in/` | **인바운드 어댑터** (REST API 컨트롤러) |
| `adapter/out/` | **아웃바운드 어댑터** (DB, 외부 API 연동) |
| `common/` | **공통 모듈** (예외 처리, 보안, 유틸리티 등) |

---

### **✅ 4. API 흐름 예시 (User 등록)**
```plaintext
1. `POST /api/v1/users/register` 요청 발생
2. `UserController` → `UserUseCase` (유스케이스 실행)
3. `UserUseCase` → `UserPort` (DB 저장을 위한 인터페이스 호출)
4. `UserPort` → `UserPersistenceAdapter` (JPA로 저장)
5. `UserPersistenceAdapter` → `UserJpaEntity` (DB 저장 완료)
6. 응답: `ApiResponse.success()` 반환
```

---

### **✅ 5. 핵심 원칙 정리**
```plaintext
✔ **도메인 중심 설계** - 핵심 비즈니스 로직은 `domain/`에 집중
✔ **포트와 어댑터 분리** - 외부 시스템 연동을 `adapter/`에 위치
✔ **단일 서비스(모놀리식) 배포** - 하나의 애플리케이션으로 관리
✔ **확장성 고려** - 마이크로서비스 전환이 가능하도록 설계됨
```

---

### **📌 최종 정리**
  ```
  내 프로젝트는 헥사고널 아키텍처를 기반으로 하면서도 모놀리식 구조를 유지합니다.
  도메인 로직(`domain/`)을 중심으로 유스케이스(`application/`)가 정의되며, 외부 시스템과의 결합을 최소화하기 위해 포트(`port/`)와 어댑터(`adapter/`) 패턴을 사용합니다.
  ```