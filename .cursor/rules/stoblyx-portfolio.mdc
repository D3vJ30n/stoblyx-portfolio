---
description: stoblyx-portfolio-rules
globs: **/*
---
### **📌 한 문장 요약**

> 내 프로젝트는 **헥사고널 아키텍처 기반의 모놀리식 시스템**으로, 도메인 로직을 중심에 두고 확장성과 유지보수를 고려하여 설계되었습니다.

---

## **2️⃣ 단계별로 구조 설명하기**

### **✅ 1. 아키텍처 개요**

```plaintext
이 프로젝트는 "헥사고널 아키텍처 + 모놀리식 구조" 기반으로 설계되었습니다.

핵심 원칙:
1. 도메인 로직과 인프라(데이터베이스, 외부 API 등)의 철저한 분리
2. 유스케이스 중심의 서비스 계층(Application Layer) 구성
3. 포트와 어댑터 패턴을 통해 외부 의존성을 최소화
4. 현재는 단일 서비스로 배포되지만, 향후 마이크로서비스 전환을 고려한 구조 설계
```

---

### **✅ 2. 프로젝트 폴더 구조 설명**

```plaintext
stoblyx-portfolio/
├── src/
│   ├── main/
│   │   ├── java/com/j30n/stoblyx/
│   │   │   ├── adapter/           # 외부 시스템과의 통신을 담당
│   │   │   ├── application/       # 비즈니스 로직 구현
│   │   │   ├── common/           # 공통 유틸리티 및 설정
│   │   │   ├── domain/           # 핵심 비즈니스 도메인
│   │   │   ├── port/             # 포트 인터페이스 정의
│   │   │   └── StoblyxApplication.java  # 메인 애플리케이션
│   │   └── resources/            # 설정 파일 및 정적 리소스
├── build.gradle                  # 프로젝트 빌드 설정
├── .env                         # 환경 변수 설정
└── README.md                    # 프로젝트 문서
```

---

### **✅ 3. 각 계층의 역할**

| 계층                       | 설명                                                           |
| -------------------------- | -------------------------------------------------------------- |
| `domain/model/`            | **도메인 모델**: 핵심 비즈니스 엔티티와 값 객체 정의           |
| `domain/service/`          | **도메인 서비스**: 도메인 로직과 비즈니스 규칙 구현            |
| `port/in/`                 | **인바운드 포트**: 애플리케이션이 제공하는 API 인터페이스 정의 |
| `port/out/`                | **아웃바운드 포트**: 외부 시스템과의 통신 인터페이스 정의      |
| `adapter/in/web/`          | **웹 어댑터**: REST API 컨트롤러 구현                          |
| `adapter/out/persistence/` | **영속성 어댑터**: DB 연동 및 JPA 구현                         |
| `application/`             | **유스케이스**: 비즈니스 로직 오케스트레이션                   |
| `common/`                  | **공통 모듈**: 예외, 설정, 유틸리티 등 공통 기능               |
| `config/`                  | **설정**: 스프링 설정 및 인프라스트럭처 설정                   |

---

### **✅ 4. API 흐름 예시 (사용자 등록)**

```plaintext
1. 클라이언트가 `POST /api/v1/users/register` 요청을 보냄
2. `UserController`에서 요청 수신 후 `UserUseCase` 호출
3. `UserUseCase`는 비즈니스 로직을 처리하고, 저장을 위해 `UserPort` 호출
4. `UserPort`는 `UserPersistenceAdapter`를 통해 DB 연동
5. `UserPersistenceAdapter`는 JPA를 사용해 사용자 정보를 DB에 저장
6. 저장 완료 후 성공 응답(`ApiResponse.success()`) 반환
```

---

### **✅ 5. 핵심 원칙 정리**

```plaintext
✔ **도메인 중심 설계**: 핵심 비즈니스 로직은 `domain/`에 집중
✔ **포트와 어댑터 분리**: 외부 시스템 연동은 `adapter/`로 분리하여 결합도 최소화
✔ **단일 서비스(모놀리식) 배포**: 초기 단계에서 관리 효율성을 높임
✔ **확장성 고려**: 마이크로서비스 전환을 염두에 두고 포트와 어댑터 계층 설계
✔ **유스케이스 중심**: 모든 외부 요청은 `application/usecase`를 통해 도메인 로직 접근
```

---

### **📌 최종 정리**

```
내 프로젝트는 헥사고널 아키텍처 기반의 모놀리식 시스템으로, 도메인 로직(`domain/`)을 중심에 두고 유스케이스(`application/`) 계층을 통해 외부 요청을 처리합니다.
포트(`port/`)와 어댑터(`adapter/`) 패턴을 적용하여 외부 시스템과의 결합도를 최소화하며, 단일 서비스로 배포하면서도 향후 마이크로서비스 전환이 용이하도록 설계되었습니다.
```
