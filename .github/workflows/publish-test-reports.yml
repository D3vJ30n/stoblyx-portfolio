name: 테스트-보고서-게시

on:
  workflow_run:
    workflows: ["REST-Assured-API-테스트"]
    types:
      - completed

# GitHub Pages 설정을 위한 동시성 제한
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  publish:
    name: 테스트 보고서 게시
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event.workflow_run.conclusion == 'failure' }}

    # GitHub Pages 권한 추가 (확장)
    permissions:
      actions: read
      contents: read
      pages: write
      id-token: write
      checks: write
      deployments: write

    # GitHub Pages 환경 설정
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: 아티팩트 다운로드
        uses: actions/download-artifact@v4
        with:
          name: rest-assured-test-results
          path: artifacts
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: 아티팩트 디버깅
        run: |
          echo "워크플로우 실행 ID: ${{ github.event.workflow_run.id }}"
          echo "아티팩트 디렉토리 내용:"
          ls -la artifacts || echo "아티팩트 디렉토리가 없습니다"
          find artifacts -type f 2>/dev/null || echo "아티팩트 파일이 없습니다"

      - name: 보고서 디렉토리 설정
        run: |
          mkdir -p reports

          # 테스트 보고서 복사 (있는 경우만)
          if [ -d "artifacts/junit-reports" ]; then
            mkdir -p reports/unit-tests
            cp -r artifacts/junit-reports/* reports/unit-tests/
          fi

          # ExtentReports 복사 (있는 경우만)
          if [ -d "artifacts/extent-reports" ]; then
            mkdir -p reports/extent-reports
            cp -r artifacts/extent-reports/* reports/extent-reports/
          fi

          # 커버리지 보고서 복사 (있는 경우만)
          if [ -d "artifacts/coverage-reports" ]; then
            mkdir -p reports/coverage
            cp -r artifacts/coverage-reports/* reports/coverage/
          fi

          # 테스트 결과 XML 복사 (있는 경우만)
          if [ -d "artifacts/test-results" ]; then
            mkdir -p reports/test-results
            cp -r artifacts/test-results/* reports/test-results/
          fi

      - name: 인덱스 페이지 생성
        run: |
          cat > reports/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="ko">
          <head>
            <meta charset="UTF-8">
            <title>API 테스트 보고서</title>
            <style>
              body { font-family: Arial, sans-serif; margin: 20px; }
              h1 { color: #2c3e50; }
              .report-link { display: block; margin: 10px 0; padding: 10px; background: #f5f5f5; }
            </style>
          </head>
          <body>
            <h1>API 테스트 보고서</h1>
            <a class="report-link" href="./unit-tests/index.html">JUnit 테스트 보고서</a>
            <a class="report-link" href="./extent-reports/extent-report.html">API 요청/응답 상세 보고서</a>
            <a class="report-link" href="./coverage/index.html">코드 커버리지 보고서</a>
            <a class="report-link" href="./test-results/">테스트 결과 XML</a>
            <p>생성 시간: <span id="date"></span></p>
            <script>document.getElementById('date').textContent = new Date().toLocaleString();</script>
          </body>
          </html>
          EOF

      - name: GitHub Pages 설정
        uses: actions/configure-pages@v3
        with:
          enablement: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 보고서 디렉토리 확인
        run: |
          echo "보고서 디렉토리 내용:"
          ls -la reports || echo "보고서 디렉토리가 없습니다"
          find reports -type f 2>/dev/null || echo "보고서 파일이 없습니다"

          # 빈 디렉토리 확인 및 처리
          if [ ! -d "reports" ] || [ -z "$(ls -A reports 2>/dev/null)" ]; then
            echo "보고서 디렉토리가 비어 있습니다. 기본 페이지 생성..."
            mkdir -p reports
            echo "<html><body><h1>테스트 보고서</h1><p>테스트 보고서가 생성되지 않았습니다.</p></body></html>" > reports/index.html
          fi

      - name: GitHub Pages 업로드
        uses: actions/upload-pages-artifact@v3
        with:
          path: reports
          retention-days: 1

      - name: GitHub Pages 배포
        id: deployment
        uses: actions/deploy-pages@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
