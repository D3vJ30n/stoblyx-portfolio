name: API-테스트-자동화

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]
  workflow_dispatch: # 수동으로 워크플로우 실행 가능

jobs:
  test:
    name: API 테스트 실행
    runs-on: ubuntu-latest

    services:
      # MySQL 서비스 컨테이너
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: 6188
          MYSQL_DATABASE: stoblyx_db
          MYSQL_USER: stoblyx_user
          MYSQL_PASSWORD: 6188
        ports:
          - 3307:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      # Redis 서비스 컨테이너
      redis:
        image: redis:6.2
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: JDK 17 설정
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: gradle

      - name: Gradle 권한 설정
        run: chmod +x ./gradlew

      - name: 환경 변수 설정
        run: |
          echo "SPRING_PROFILES_ACTIVE=test" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_URL=jdbc:mysql://localhost:3307/stoblyx_db" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_USERNAME=stoblyx_user" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_PASSWORD=6188" >> $GITHUB_ENV
          echo "SPRING_REDIS_HOST=localhost" >> $GITHUB_ENV
          echo "SPRING_REDIS_PORT=6379" >> $GITHUB_ENV
          # 필요한 다른 환경 변수들도 여기에 추가

      - name: 테스트 실행
        run: ./gradlew test --info

      # JUnit 보고서를 직접 처리하는 방식으로 변경
      - name: 테스트 결과 확인
        run: |
          echo "테스트 결과를 확인합니다."
          if [ -d "build/test-results/test" ]; then
            echo "테스트 결과가 생성되었습니다."
            ls -la build/test-results/test/
          else
            echo "테스트 결과가 없습니다."
          fi

      # 아티팩트를 직접 압축하고 GitHub API로 업로드
      - name: 테스트 보고서 압축
        run: |
          mkdir -p artifacts
          tar -czf artifacts/test-reports.tar.gz -C build/reports/tests/test .
          echo "Archived test reports"

      # 테스트 커버리지 보고서 생성
      - name: 테스트 커버리지 보고서 생성
        run: ./gradlew jacocoTestReport

      # 커버리지 보고서 압축
      - name: 커버리지 보고서 압축
        run: |
          tar -czf artifacts/coverage-reports.tar.gz -C build/reports/jacoco/test/html .
          echo "Archived coverage reports"
        if: always()

      # 간단한 업로드 방식 사용
      - name: 아티팩트 업로드
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: reports
          path: artifacts/*.tar.gz
          retention-days: 90
