name: API 통합 테스트

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]
  workflow_dispatch: # 수동으로 워크플로우 실행 가능
  schedule:
    - cron: "0 0 * * *" # 매일 자정에 실행

jobs:
  integration-test:
    name: API 통합 테스트 실행
    runs-on: ubuntu-latest

    services:
      # MySQL 서비스 컨테이너
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: stoblyx_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      # Redis 서비스 컨테이너
      redis:
        image: redis:6.2
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v3

      - name: JDK 17 설정
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
          cache: gradle

      - name: Gradle 권한 설정
        run: chmod +x ./gradlew

      - name: 환경 변수 설정
        run: |
          echo "SPRING_PROFILES_ACTIVE=test" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_URL=jdbc:mysql://localhost:3306/stoblyx_test" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_USERNAME=root" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_PASSWORD=root" >> $GITHUB_ENV
          echo "SPRING_REDIS_HOST=localhost" >> $GITHUB_ENV
          echo "SPRING_REDIS_PORT=6379" >> $GITHUB_ENV
          # 필요한 다른 환경 변수들도 여기에 추가

      - name: 애플리케이션 빌드
        run: ./gradlew build -x test

      - name: 애플리케이션 실행
        run: |
          nohup java -jar build/libs/*.jar --spring.profiles.active=test > app.log 2>&1 &
          echo "APP_PID=$!" >> $GITHUB_ENV
          # 애플리케이션이 시작될 때까지 대기
          sleep 30
          cat app.log

      - name: API 통합 테스트 실행을 위한 Node.js 설정
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      - name: Newman 설치
        run: npm install -g newman newman-reporter-htmlextra

      - name: API 통합 테스트 디렉토리 생성
        run: mkdir -p src/test/postman

      - name: API 통합 테스트 컬렉션 생성
        run: |
          cat > src/test/postman/stoblyx-api-collection.json << 'EOF'
          {
            "info": {
              "_postman_id": "stoblyx-api-tests",
              "name": "Stoblyx API Tests",
              "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
            },
            "item": [
              {
                "name": "인증 API 테스트",
                "item": [
                  {
                    "name": "회원가입",
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "exec": [
                            "pm.test(\"회원가입 성공 응답\", function () {",
                            "    pm.response.to.have.status(200);",
                            "    var jsonData = pm.response.json();",
                            "    pm.expect(jsonData.result).to.eql(\"SUCCESS\");",
                            "});"
                          ],
                          "type": "text/javascript"
                        }
                      }
                    ],
                    "request": {
                      "method": "POST",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"email\": \"test@example.com\",\n    \"password\": \"Test1234!\",\n    \"nickname\": \"테스트유저\"\n}"
                      },
                      "url": {
                        "raw": "http://localhost:8080/api/auth/signup",
                        "protocol": "http",
                        "host": ["localhost"],
                        "port": "8080",
                        "path": ["api", "auth", "signup"]
                      }
                    }
                  },
                  {
                    "name": "로그인",
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "exec": [
                            "pm.test(\"로그인 성공 응답\", function () {",
                            "    pm.response.to.have.status(200);",
                            "    var jsonData = pm.response.json();",
                            "    pm.expect(jsonData.result).to.eql(\"SUCCESS\");",
                            "    pm.expect(jsonData.data).to.have.property(\"accessToken\");",
                            "    pm.environment.set(\"accessToken\", jsonData.data.accessToken);",
                            "});"
                          ],
                          "type": "text/javascript"
                        }
                      }
                    ],
                    "request": {
                      "method": "POST",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"email\": \"test@example.com\",\n    \"password\": \"Test1234!\"\n}"
                      },
                      "url": {
                        "raw": "http://localhost:8080/api/auth/login",
                        "protocol": "http",
                        "host": ["localhost"],
                        "port": "8080",
                        "path": ["api", "auth", "login"]
                      }
                    }
                  }
                ]
              },
              {
                "name": "도서 API 테스트",
                "item": [
                  {
                    "name": "도서 목록 조회",
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "exec": [
                            "pm.test(\"도서 목록 조회 성공 응답\", function () {",
                            "    pm.response.to.have.status(200);",
                            "    var jsonData = pm.response.json();",
                            "    pm.expect(jsonData.result).to.eql(\"SUCCESS\");",
                            "});"
                          ],
                          "type": "text/javascript"
                        }
                      }
                    ],
                    "request": {
                      "method": "GET",
                      "header": [],
                      "url": {
                        "raw": "http://localhost:8080/api/books?page=0&size=10",
                        "protocol": "http",
                        "host": ["localhost"],
                        "port": "8080",
                        "path": ["api", "books"],
                        "query": [
                          {
                            "key": "page",
                            "value": "0"
                          },
                          {
                            "key": "size",
                            "value": "10"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "name": "도서 상세 조회",
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "exec": [
                            "pm.test(\"도서 상세 조회 성공 응답\", function () {",
                            "    pm.response.to.have.status(200);",
                            "    var jsonData = pm.response.json();",
                            "    pm.expect(jsonData.result).to.eql(\"SUCCESS\");",
                            "});"
                          ],
                          "type": "text/javascript"
                        }
                      }
                    ],
                    "request": {
                      "method": "GET",
                      "header": [],
                      "url": {
                        "raw": "http://localhost:8080/api/books/1",
                        "protocol": "http",
                        "host": ["localhost"],
                        "port": "8080",
                        "path": ["api", "books", "1"]
                      }
                    }
                  }
                ]
              },
              {
                "name": "사용자 API 테스트",
                "item": [
                  {
                    "name": "사용자 정보 조회",
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "exec": [
                            "pm.test(\"사용자 정보 조회 성공 응답\", function () {",
                            "    pm.response.to.have.status(200);",
                            "    var jsonData = pm.response.json();",
                            "    pm.expect(jsonData.result).to.eql(\"SUCCESS\");",
                            "});"
                          ],
                          "type": "text/javascript"
                        }
                      }
                    ],
                    "request": {
                      "method": "GET",
                      "header": [
                        {
                          "key": "Authorization",
                          "value": "Bearer {{accessToken}}"
                        }
                      ],
                      "url": {
                        "raw": "http://localhost:8080/api/users/me",
                        "protocol": "http",
                        "host": ["localhost"],
                        "port": "8080",
                        "path": ["api", "users", "me"]
                      }
                    }
                  }
                ]
              }
            ]
          }
          EOF

      - name: API 통합 테스트 환경 설정 파일 생성
        run: |
          cat > src/test/postman/stoblyx-environment.json << 'EOF'
          {
            "id": "stoblyx-test-env",
            "name": "Stoblyx Test Environment",
            "values": [
              {
                "key": "baseUrl",
                "value": "http://localhost:8080",
                "enabled": true
              },
              {
                "key": "accessToken",
                "value": "",
                "enabled": true
              }
            ]
          }
          EOF

      - name: API 통합 테스트 실행
        run: |
          newman run src/test/postman/stoblyx-api-collection.json \
            -e src/test/postman/stoblyx-environment.json \
            -r cli,htmlextra \
            --reporter-htmlextra-export=newman/report.html

      - name: API 통합 테스트 보고서 업로드
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: api-test-report
          path: newman/
          retention-days: 7

      - name: 애플리케이션 종료
        if: always()
        run: |
          if [[ -n "$APP_PID" ]]; then
            kill $APP_PID || true
          fi
