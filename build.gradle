plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.9'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'com.j30n'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExt
}

repositories {
    mavenCentral()
}

ext {
    snippetsDir = file('build/generated-snippets')
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'

    // JSON 처리를 위한 라이브러리 추가
    implementation 'org.json:json:20240303'

    // XSS 방지를 위한 Lucy-XSS-Filter 추가
    implementation 'com.navercorp.lucy:lucy-xss-servlet:2.0.1'
    implementation 'com.navercorp.lucy:lucy-xss:1.6.3'
    implementation 'javax.servlet:javax.servlet-api:4.0.1'

    // JSR-305 for annotations
    implementation 'com.google.code.findbugs:jsr305:3.0.2'

    // Annotations
    implementation 'org.jetbrains:annotations:24.0.0'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // Database
    implementation 'com.mysql:mysql-connector-j'

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'com.h2database:h2'

    // REST Assured API 테스트 의존성
    testImplementation 'io.rest-assured:rest-assured:5.3.2'
    testImplementation 'io.rest-assured:json-path:5.3.2'
    testImplementation 'io.rest-assured:xml-path:5.3.2'
    testImplementation 'org.hamcrest:hamcrest:2.2'

    // ExtentReports 테스트 리포팅
    testImplementation 'com.aventstack:extentreports:5.1.1'

    // Spring REST Docs
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.restdocs:spring-restdocs-restassured'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    testRuntimeOnly 'com.h2database:h2'

    implementation 'net.sf.sociaal:freetts:1.2.2'

    // 환경변수 로드를 위한 의존성 추가
    implementation 'me.paulschwarz:spring-dotenv:2.5.4'

    // 캐싱을 위한 Caffeine 캐시 추가
    implementation 'com.github.ben-manes.caffeine:caffeine'

    // 서블릿 API 의존성 추가
    implementation 'jakarta.servlet:jakarta.servlet-api:6.0.0'

    // Swagger/OpenAPI
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.4.0'
}

testing {
    suites {
        test {
            useJUnitJupiter('5.10.1')
        }
    }
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

// E2E 테스트를 위한 태스크 추가
task e2eTest(type: Test) {
    description = 'Runs E2E tests'
    group = 'verification'

    useJUnitPlatform {
        includeTags 'e2e'
    }

    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath

    // E2E 테스트 결과 보고서 설정
    reports {
        html.outputLocation = file("${buildDir}/reports/e2e-tests")
    }

    // E2E 테스트 시스템 프로퍼티 설정
    systemProperty 'spring.profiles.active', 'test'
}

// 통합 테스트를 위한 태스크 추가
task integrationTest(type: Test) {
    description = '통합 테스트를 실행합니다'
    group = 'verification'

    useJUnitPlatform {
        // 통합 테스트 클래스 패턴 지정
        include 'com/j30n/stoblyx/integration/**/*Test.class'
    }

    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath

    // 통합 테스트 결과 보고서 설정
    reports {
        html.outputLocation = file("${buildDir}/reports/integration-tests")
    }

    // 통합 테스트 시스템 프로퍼티 설정
    systemProperty 'spring.profiles.active', 'test'

    // 일반 테스트 실행 후 통합 테스트 실행
    mustRunAfter test
}

// 모든 테스트 실행 태스크 추가 (일반 + 통합 테스트)
task allTests(type: Test) {
    description = '일반 테스트와 통합 테스트를 모두 실행합니다'
    group = 'verification'

    dependsOn test, integrationTest
}

asciidoctor {
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'
    dependsOn test
}

bootJar {
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

tasks.withType(JavaExec) {
    jvmArgs += [
            '--add-opens', 'java.base/sun.nio.ch=ALL-UNNAMED',
            '--add-opens', 'java.base/java.io=ALL-UNNAMED'
    ]
}
